//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Collections.Generic;
using Gravitybox.gFileSystem.EFDAL.Entity;
using System.Linq.Expressions;

namespace Gravitybox.gFileSystem.EFDAL
{
	#region gFileSystemEntitiesExtensions

	/// <summary>
	/// Extension methods for this library
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public static partial class gFileSystemEntitiesExtensions
	{
		#region Include Extension Methods

		private static System.Data.Entity.Infrastructure.DbQuery<T> GetInclude<T, R>(this System.Data.Entity.Infrastructure.DbQuery<T> item, Expression<Func<R, Gravitybox.gFileSystem.EFDAL.IContextInclude>> query)
			where T : BaseEntity
			where R : IContextInclude
		{
			var strings = new List<string>(query.Body.ToString().Split('.'));
			strings.RemoveAt(0);
			var compoundString = string.Empty;
			foreach (var s in strings)
			{
				if (!string.IsNullOrEmpty(compoundString)) compoundString += ".";
				compoundString += s;
				item = item.Include(compoundString);
			}
			return item;
		}

		private static IQueryable<T> GetInclude<T, R>(this IQueryable<T> item, Expression<Func<R, Gravitybox.gFileSystem.EFDAL.IContextInclude>> query)
			where T : BaseEntity
			where R : IContextInclude
		{
			var dbItem = item as System.Data.Entity.Infrastructure.DbQuery<T>;
			if (dbItem != null) return GetInclude(dbItem, query);
			var tempItem = item as System.Data.Entity.Core.Objects.ObjectQuery<T>;
			if (tempItem == null) return item;
			var strings = new List<string>(query.Body.ToString().Split('.'));
			strings.RemoveAt(0);
			var compoundString = string.Empty;
			foreach (var s in strings)
			{
				if (!string.IsNullOrEmpty(compoundString)) compoundString += ".";
				compoundString += s;
				tempItem = tempItem.Include(compoundString);
			}
			return tempItem;
		}

		/// <summary>
		/// Specifies the related objects to include in the query results.
		/// </summary>
		/// <param name="item">Related object to return in query results</param>
		/// <param name="query">The LINQ expresssion that maps an include path</param>
		public static System.Data.Entity.Infrastructure.DbQuery<Gravitybox.gFileSystem.EFDAL.Entity.FileStash> Include(this System.Data.Entity.Infrastructure.DbQuery<Gravitybox.gFileSystem.EFDAL.Entity.FileStash> item, Expression<Func<Gravitybox.gFileSystem.EFDAL.FileStashInclude, Gravitybox.gFileSystem.EFDAL.IContextInclude>> query)
		{
			return GetInclude<Gravitybox.gFileSystem.EFDAL.Entity.FileStash, Gravitybox.gFileSystem.EFDAL.FileStashInclude>(item, query);
		}

		/// <summary>
		/// Specifies the related objects to include in the query results.
		/// </summary>
		/// <param name="item">Related object to return in query results</param>
		/// <param name="query">The LINQ expresssion that maps an include path</param>
		public static IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.FileStash> Include(this IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.FileStash> item, Expression<Func<Gravitybox.gFileSystem.EFDAL.FileStashInclude, Gravitybox.gFileSystem.EFDAL.IContextInclude>> query)
		{
			return GetInclude<Gravitybox.gFileSystem.EFDAL.Entity.FileStash, Gravitybox.gFileSystem.EFDAL.FileStashInclude>(item, query);
		}

		/// <summary>
		/// Specifies the related objects to include in the query results.
		/// </summary>
		/// <param name="item">Related object to return in query results</param>
		/// <param name="query">The LINQ expresssion that maps an include path</param>
		public static System.Data.Entity.Infrastructure.DbQuery<Gravitybox.gFileSystem.EFDAL.Entity.Tenant> Include(this System.Data.Entity.Infrastructure.DbQuery<Gravitybox.gFileSystem.EFDAL.Entity.Tenant> item, Expression<Func<Gravitybox.gFileSystem.EFDAL.TenantInclude, Gravitybox.gFileSystem.EFDAL.IContextInclude>> query)
		{
			return GetInclude<Gravitybox.gFileSystem.EFDAL.Entity.Tenant, Gravitybox.gFileSystem.EFDAL.TenantInclude>(item, query);
		}

		/// <summary>
		/// Specifies the related objects to include in the query results.
		/// </summary>
		/// <param name="item">Related object to return in query results</param>
		/// <param name="query">The LINQ expresssion that maps an include path</param>
		public static IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.Tenant> Include(this IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.Tenant> item, Expression<Func<Gravitybox.gFileSystem.EFDAL.TenantInclude, Gravitybox.gFileSystem.EFDAL.IContextInclude>> query)
		{
			return GetInclude<Gravitybox.gFileSystem.EFDAL.Entity.Tenant, Gravitybox.gFileSystem.EFDAL.TenantInclude>(item, query);
		}

		#endregion

		#region GetFieldType Extension Method

		/// <summary>
		/// Get the system type of a field of one of the contained context objects
		/// </summary>
		public static System.Type GetFieldType(this Gravitybox.gFileSystem.EFDAL.gFileSystemEntities context, Enum field)
		{
			if (field is Gravitybox.gFileSystem.EFDAL.Entity.ConfigSetting.FieldNameConstants)
				return Gravitybox.gFileSystem.EFDAL.Entity.ConfigSetting.GetFieldType((Gravitybox.gFileSystem.EFDAL.Entity.ConfigSetting.FieldNameConstants)field);
			if (field is Gravitybox.gFileSystem.EFDAL.Entity.FileStash.FieldNameConstants)
				return Gravitybox.gFileSystem.EFDAL.Entity.FileStash.GetFieldType((Gravitybox.gFileSystem.EFDAL.Entity.FileStash.FieldNameConstants)field);
			if (field is Gravitybox.gFileSystem.EFDAL.Entity.Tenant.FieldNameConstants)
				return Gravitybox.gFileSystem.EFDAL.Entity.Tenant.GetFieldType((Gravitybox.gFileSystem.EFDAL.Entity.Tenant.FieldNameConstants)field);
			throw new Exception("Unknown field type!");
		}

		#endregion

		#region Metadata Extension Methods

		/// <summary>
		/// Creates and returns a metadata object for an entity type
		/// </summary>
		/// <param name="entity">The source class</param>
		/// <returns>A metadata object for the entity types in this assembly</returns>
		public static Gravitybox.gFileSystem.EFDAL.IMetadata GetMetaData(this Gravitybox.gFileSystem.EFDAL.IReadOnlyBusinessObject entity)
		{
			var a = entity.GetType().GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.MetadataTypeAttribute), true).FirstOrDefault();
			if (a == null) return null;
			var t = ((System.ComponentModel.DataAnnotations.MetadataTypeAttribute)a).MetadataClassType;
			if (t == null) return null;
			return Activator.CreateInstance(t) as Gravitybox.gFileSystem.EFDAL.IMetadata;
		}

		#endregion

		#region GetEntityType

		/// <summary>
		/// Determines the entity from one of its fields
		/// </summary>
		public static System.Type GetEntityType(EntityMappingConstants entityType)
		{
			switch (entityType)
			{
				case EntityMappingConstants.ConfigSetting: return typeof(Gravitybox.gFileSystem.EFDAL.Entity.ConfigSetting);
				case EntityMappingConstants.FileStash: return typeof(Gravitybox.gFileSystem.EFDAL.Entity.FileStash);
				case EntityMappingConstants.Tenant: return typeof(Gravitybox.gFileSystem.EFDAL.Entity.Tenant);
			}
			throw new Exception("Unknown entity type!");
		}

		#endregion

		#region GetValue Methods

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <typeparam name="R">The type of object from which retrieve the field value</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T, R>(this R item, System.Linq.Expressions.Expression<System.Func<R, T>> selector)
			where R : BaseEntity
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var ft = ((IReadOnlyBusinessObject)item).GetFieldNameConstants();
			var te = (System.Enum)Enum.Parse(ft, tn, true);
			return item.GetValueInternal<T, R>(field: te, defaultValue: default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <typeparam name="R">The type of object from which retrieve the field value</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T, R>(this R item, System.Linq.Expressions.Expression<System.Func<R, T>> selector, T defaultValue)
			where R : BaseEntity
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var ft = ((IReadOnlyBusinessObject)item).GetFieldNameConstants();
			var te = (System.Enum)Enum.Parse(ft, tn, true);
			return item.GetValueInternal<T, R>(field: te, defaultValue: defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <typeparam name="R">The type of object from which retrieve the field value</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		private static T GetValueInternal<T, R>(this R item, System.Enum field, T defaultValue)
			where R : BaseEntity
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = ((IReadOnlyBusinessObject)item).GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		#endregion

		#region SetValue
		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public static void SetValue<TResult, R>(this R item, System.Linq.Expressions.Expression<System.Func<R, TResult>> selector, TResult newValue)
			where R : BaseEntity, IBusinessObject
		{
			SetValue(item: item, selector: selector, newValue: newValue, fixLength: false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public static void SetValue<TResult, R>(this R item, System.Linq.Expressions.Expression<System.Func<R, TResult>> selector, TResult newValue, bool fixLength)
			where R : BaseEntity, IBusinessObject
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var ft = ((IReadOnlyBusinessObject)item).GetFieldNameConstants();
			var te = (System.Enum)Enum.Parse(ft, tn, true);
			((IBusinessObject)item).SetValue(field: te, newValue: newValue, fixLength: fixLength);
		}

		#endregion

		#region ObservableCollection
		/// <summary>
		/// Returns an observable collection that can bound to UI controls
		/// </summary>
		public static System.Collections.ObjectModel.ObservableCollection<T> AsObservable<T>(this System.Collections.Generic.IEnumerable<T> list)
			where T : Gravitybox.gFileSystem.EFDAL.IReadOnlyBusinessObject
		{
			var retval = new System.Collections.ObjectModel.ObservableCollection<T>();
			foreach (var o in list)
				retval.Add(o);
			return retval;
		}
		#endregion

		#region Delete Extensions
		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		public static void Delete<T>(this IQueryable<T> query)
			where T : Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			query.Delete(optimizer: null, connectionString: null);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		public static void Delete<T>(this IQueryable<T> query, QueryOptimizer optimizer)
			where T : Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			query.Delete(optimizer: optimizer, connectionString: null);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		public static void Delete<T>(this IQueryable<T> query, string connectionString)
			where T : Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			query.Delete(optimizer: new QueryOptimizer(), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		public static void  Delete<T>(this IQueryable<T> query, QueryOptimizer optimizer, string connectionString)
			where T : Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();

			//There is nothing to do
			if (query.ToString().Replace("\r", string.Empty).Split(new char[] { '\n' }).LastOrDefault().Trim() == "WHERE 1 = 0")
				return;

			var instanceKey = Guid.Empty;
			System.Data.Entity.Core.Objects.ObjectContext objectContext = null;
			try
			{

				var propContext = query.Provider.GetType().GetProperty("InternalContext");
				if (propContext != null)
				{
					var context = propContext.GetValue(query.Provider);
					if (context != null)
					{
						var oc = context.GetType().GetProperty("ObjectContext").GetValue(context) as System.Data.Entity.Core.Objects.ObjectContext;
						objectContext = oc as System.Data.Entity.Core.Objects.ObjectContext;
						instanceKey = ((IContext)context.GetType().GetProperty("Owner").GetValue(context)).InstanceKey;
						if (string.IsNullOrEmpty(connectionString))
						{
							var propCs = context.GetType().GetProperty("OriginalConnectionString");
							if (propCs != null) connectionString = (string)propCs.GetValue(context);
						}
					}
				}

				if (instanceKey == Guid.Empty)
				{
					var context2 = query.Provider.GetType().GetField("_context", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
					if (context2 != null)
					{
						var context = context2.GetValue(query.Provider);
						objectContext = context as System.Data.Entity.Core.Objects.ObjectContext;
						var qq = objectContext.InterceptionContext.DbContexts.First() as Gravitybox.gFileSystem.EFDAL.IgFileSystemEntities;
						instanceKey = qq.InstanceKey;
						if (string.IsNullOrEmpty(connectionString))
						{
							connectionString = Util.StripEFCS2Normal(objectContext.Connection.ConnectionString);
						}
					}
				}

				if (instanceKey == Guid.Empty)
					throw new Exception("Unknown context");

				if (string.IsNullOrEmpty(connectionString))
				{
					var propContext2 = query.GetType().GetProperty("Context");
					if (propContext2 != null)
					{
						var context = propContext2.GetValue(query) as System.Data.Entity.Core.Objects.ObjectContext;
						if (context != null)
						{
							var builder = new System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder(context.Connection.ConnectionString);
							if (!string.IsNullOrWhiteSpace(builder.ProviderConnectionString))
							{
								objectContext = context;
								connectionString = builder.ProviderConnectionString;
							}
						}
					}
				}
			}
			catch { }

			System.Data.Entity.Core.Objects.ObjectParameterCollection existingParams = null;
			{
			    var objectQuery = query as System.Data.Entity.Core.Objects.ObjectQuery<T>;
			    if (objectQuery == null)
			    {
			        var internalQueryField = query.GetType().GetProperty("InternalQuery", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance).GetValue(query);
			        if (internalQueryField != null)
			            objectQuery = internalQueryField.GetType().GetProperty("ObjectQuery").GetValue(internalQueryField) as System.Data.Entity.Core.Objects.ObjectQuery<T>;
			    }

			    if (objectQuery != null)
			    {
			        var ss2 = objectQuery.ToTraceString(); //DO NOT REMOVE! must call this to init params
			        existingParams = objectQuery.GetType().GetProperty("Parameters").GetValue(objectQuery) as System.Data.Entity.Core.Objects.ObjectParameterCollection;
			    }
			}

			var sb = new System.Text.StringBuilder();
			#region Per table code
			if (false) ;
			else if (typeof(T) == typeof(Gravitybox.gFileSystem.EFDAL.Entity.ConfigSetting))
			{
				sb.AppendLine("set rowcount " + optimizer.ChunkSize + ";");
				sb.AppendLine("delete [X] from [dbo].[ConfigSetting] [X] inner join (");
				sb.AppendLine(((IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.ConfigSetting>)query).Select(x => new { x.ID }).ToString());
				sb.AppendLine(") AS [Extent2]");
				sb.AppendLine("on [X].[ID] = [Extent2].[ID]");
				sb.AppendLine("select @@ROWCOUNT");
			}
			else if (typeof(T) == typeof(Gravitybox.gFileSystem.EFDAL.Entity.FileStash))
			{
				sb.AppendLine("set rowcount " + optimizer.ChunkSize + ";");
				sb.AppendLine("delete [X] from [dbo].[FileStash] [X] inner join (");
				sb.AppendLine(((IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.FileStash>)query).Select(x => new { x.FileStashID }).ToString());
				sb.AppendLine(") AS [Extent2]");
				sb.AppendLine("on [X].[FileStashID] = [Extent2].[FileStashID]");
				sb.AppendLine("select @@ROWCOUNT");
			}
			else if (typeof(T) == typeof(Gravitybox.gFileSystem.EFDAL.Entity.Tenant))
			{
				sb.AppendLine("set rowcount " + optimizer.ChunkSize + ";");
				sb.AppendLine("delete [X] from [dbo].[Tenant] [X] inner join (");
				sb.AppendLine(((IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.Tenant>)query).Select(x => new { x.TenantID }).ToString());
				sb.AppendLine(") AS [Extent2]");
				sb.AppendLine("on [X].[TenantID] = [Extent2].[TenantID]");
				sb.AppendLine("select @@ROWCOUNT");
			}
			else throw new Exception("Entity type not found");
			#endregion
			if (string.IsNullOrEmpty(connectionString))
				connectionString = gFileSystemEntities.GetConnectionString();

			var newParams = new List<System.Data.SqlClient.SqlParameter>();
			if (existingParams != null)
			{
				foreach (var ep in existingParams)
				{
					newParams.Add(new System.Data.SqlClient.SqlParameter { ParameterName = ep.Name, Value = (ep.Value == null ? System.DBNull.Value : ep.Value) });
				}
			}
			QueryPreCache.AddDelete(instanceKey, sb.ToString(), newParams, optimizer);
		}

		/// <summary />
		public static void Delete<T>(this System.Data.Entity.DbSet<T> entitySet, Expression<Func<T, bool>> where)
			where T : class, Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			entitySet.Where(where).Delete(optimizer: null, connectionString: null);
		}

		/// <summary />
		public static void Delete<T>(this System.Data.Entity.DbSet<T> entitySet, Expression<Func<T, bool>> where, QueryOptimizer optimizer)
			where T : System.Data.Entity.DbSet<T>, Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			entitySet.Where(where).Delete(optimizer: optimizer, connectionString: null);
		}

		/// <summary />
		public static void Delete<T>(this System.Data.Entity.DbSet<T> entitySet, Expression<Func<T, bool>> where, string connectionString)
			where T : System.Data.Entity.DbSet<T>, Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			entitySet.Where(where).Delete(optimizer: null, connectionString: connectionString);
		}

		#endregion

		#region Update Extensions

		/// <summary />
		public static void Update<T>(this IQueryable<T> query, Expression<Func<T, T>> obj)
			where T : Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			query.Update(obj: obj, optimizer: null, connectionString: null);
		}

		/// <summary />
		public static void Update<T>(this IQueryable<T> query, Expression<Func<T, T>> obj, QueryOptimizer optimizer)
			where T : Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			query.Update(obj: obj, optimizer: optimizer, connectionString: null);
		}

		/// <summary />
		public static void Update<T>(this IQueryable<T> query, Expression<Func<T, T>> obj, string connectionString)
			where T : Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			query.Update(obj: obj, optimizer: null, connectionString: connectionString);
		}

		/// <summary />
		public static void Update<T>(this IQueryable<T> query, Expression<Func<T, T>> obj, QueryOptimizer optimizer, string connectionString)
			where T : Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{

			if (optimizer == null)
				optimizer = new QueryOptimizer();

			//There is nothing to do
			if (query.ToString().Replace("\r", string.Empty).Split(new char[] { '\n' }).LastOrDefault().Trim() == "WHERE 1 = 0")
				return;

			var instanceKey = Guid.Empty;
			System.Data.Entity.Core.Objects.ObjectContext objectContext = null;
			try
			{

				var propContext = query.Provider.GetType().GetProperty("InternalContext");
				if (propContext != null)
				{
					var context = propContext.GetValue(query.Provider);
					if (context != null)
					{
						var oc = context.GetType().GetProperty("ObjectContext").GetValue(context) as System.Data.Entity.Core.Objects.ObjectContext;
						objectContext = oc as System.Data.Entity.Core.Objects.ObjectContext;
						instanceKey = ((IContext)context.GetType().GetProperty("Owner").GetValue(context)).InstanceKey;
						if (string.IsNullOrEmpty(connectionString))
						{
							var propCs = context.GetType().GetProperty("OriginalConnectionString");
							if (propCs != null) connectionString = (string)propCs.GetValue(context);
						}
					}
				}

				if (instanceKey == Guid.Empty)
				{
					var context2 = query.Provider.GetType().GetField("_context", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
					if (context2 != null)
					{
						var context = context2.GetValue(query.Provider);
						objectContext = context as System.Data.Entity.Core.Objects.ObjectContext;
						var qq = objectContext.InterceptionContext.DbContexts.First() as Gravitybox.gFileSystem.EFDAL.IgFileSystemEntities;
						instanceKey = qq.InstanceKey;
						if (string.IsNullOrEmpty(connectionString))
						{
							connectionString = Util.StripEFCS2Normal(objectContext.Connection.ConnectionString);
						}
					}
				}

				if (instanceKey == Guid.Empty)
					throw new Exception("Unknown context");

				if (string.IsNullOrEmpty(connectionString))
				{
					var propContext2 = query.GetType().GetProperty("Context");
					if (propContext2 != null)
					{
						var context = propContext2.GetValue(query) as System.Data.Entity.Core.Objects.ObjectContext;
						if (context != null)
						{
							var builder = new System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder(context.Connection.ConnectionString);
							if (!string.IsNullOrWhiteSpace(builder.ProviderConnectionString))
							{
								objectContext = context;
								connectionString = builder.ProviderConnectionString;
							}
						}
					}
				}
			}
			catch { }

			System.Data.Entity.Core.Objects.ObjectParameterCollection existingParams = null;
			{
			    var objectQuery = query as System.Data.Entity.Core.Objects.ObjectQuery<T>;
			    if (objectQuery == null)
			    {
			        var internalQueryField = query.GetType().GetProperty("InternalQuery", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance).GetValue(query);
			        if (internalQueryField != null)
			            objectQuery = internalQueryField.GetType().GetProperty("ObjectQuery").GetValue(internalQueryField) as System.Data.Entity.Core.Objects.ObjectQuery<T>;
			    }

			    if (objectQuery != null)
			    {
			        var ss2 = objectQuery.ToTraceString(); //DO NOT REMOVE! must call this to init params
			        existingParams = objectQuery.GetType().GetProperty("Parameters").GetValue(objectQuery) as System.Data.Entity.Core.Objects.ObjectParameterCollection;
			    }
			}

			var startTime = DateTime.Now;
			var changedList = new Dictionary<string, object>();

			#region Parse Tree
			var propBody = obj.GetType().GetProperty("Body");
			if (propBody != null)
			{
				var body = propBody.GetValue(obj);
				if (body != null)
				{
					var propBindings = body.GetType().GetProperty("Bindings");
					if (propBindings != null)
					{
						var members = (IEnumerable<System.Linq.Expressions.MemberBinding>)propBindings.GetValue(body);
						foreach (System.Linq.Expressions.MemberAssignment item in members)
						{
							var name = item.Member.Name;
							object value = null;

							if (item.Expression.Type == typeof(int?))
								value = CompileValue<int?>(item.Expression);
							else if (item.Expression.Type == typeof(int))
								value = CompileValue<int>(item.Expression);

							else if (item.Expression.Type == typeof(string))
								value = CompileValue<string>(item.Expression);

							else if (item.Expression.Type == typeof(bool?))
								value = CompileValue<bool?>(item.Expression);
							else if (item.Expression.Type == typeof(bool))
								value = CompileValue<bool>(item.Expression);

							else if (item.Expression.Type == typeof(byte?))
								value = CompileValue<byte?>(item.Expression);
							else if (item.Expression.Type == typeof(byte))
								value = CompileValue<byte>(item.Expression);

							else if (item.Expression.Type == typeof(char?))
								value = CompileValue<char?>(item.Expression);
							else if (item.Expression.Type == typeof(char))
								value = CompileValue<char>(item.Expression);

							else if (item.Expression.Type == typeof(decimal?))
								value = CompileValue<decimal?>(item.Expression);
							else if (item.Expression.Type == typeof(decimal))
								value = CompileValue<decimal>(item.Expression);

							else if (item.Expression.Type == typeof(double?))
								value = CompileValue<double?>(item.Expression);
							else if (item.Expression.Type == typeof(double))
								value = CompileValue<double>(item.Expression);

							else if (item.Expression.Type == typeof(float?))
								value = CompileValue<float?>(item.Expression);
							else if (item.Expression.Type == typeof(float))
								value = CompileValue<float>(item.Expression);

							else if (item.Expression.Type == typeof(long?))
								value = CompileValue<long?>(item.Expression);
							else if (item.Expression.Type == typeof(long))
								value = CompileValue<long>(item.Expression);

							else if (item.Expression.Type == typeof(short?))
								value = CompileValue<short?>(item.Expression);
							else if (item.Expression.Type == typeof(short))
								value = CompileValue<short>(item.Expression);

							else if (item.Expression.Type == typeof(DateTime?))
								value = CompileValue<DateTime?>(item.Expression);
							else if (item.Expression.Type == typeof(DateTime))
								value = CompileValue<DateTime>(item.Expression);

							else
								throw new Exception("Data type is not handled '" + item.Expression.Type.Name + "'");

							changedList.Add(name, value);
						}
					}
					else
					{
						throw new Exception("Update statement must be in format 'm => new Entity { Field = 0 }'");
					}
				}
			}
			#endregion

			//Create a mapping for inheritance
			var mapping = new List<UpdateSqlMapItem>();
			IReadOnlyBusinessObject theObj = new T();
			do
			{
				var md = theObj.GetMetaData();
				mapping.Add(new UpdateSqlMapItem { TableName = md.GetTableName(), FieldList = md.GetFields(), Schema = md.Schema(), Metadata = md });
				var newT = md.InheritsFrom();
				if (newT == null)
					theObj = default(T);
				else
					theObj = (IReadOnlyBusinessObject)Activator.CreateInstance(newT, false);
			} while (theObj != null);

			var paramIndex = 0;
			var parameters = new List<System.Data.SqlClient.SqlParameter>();
			foreach (var key in changedList.Keys)
			{
				var map = mapping.First(x => x.FieldList.Any(z => z == key));
				var fieldSql = map.SqlList;
				var value = changedList[key];
				if (value == null)
					fieldSql.Add("[" + map.Metadata.GetDatabaseFieldName(key) + "] = NULL");
				else if (value is string)
				{
					fieldSql.Add("[" + map.Metadata.GetDatabaseFieldName(key) + "] = @param" + paramIndex);
					parameters.Add(new System.Data.SqlClient.SqlParameter { ParameterName = "@param" + paramIndex, DbType = System.Data.DbType.String, Value = changedList[key] });
				}
				else if (value is DateTime)
				{
					fieldSql.Add("[" + map.Metadata.GetDatabaseFieldName(key) + "] = @param" + paramIndex);
					parameters.Add(new System.Data.SqlClient.SqlParameter { ParameterName = "@param" + paramIndex, DbType = System.Data.DbType.DateTime, Value = changedList[key] });
				}
				else
				{
					fieldSql.Add("[" + map.Metadata.GetDatabaseFieldName(key) + "] = @param" + paramIndex);
					parameters.Add(new System.Data.SqlClient.SqlParameter { ParameterName = "@param" + paramIndex, Value = changedList[key] });
				}
				paramIndex++;
			}

			var sb = new System.Text.StringBuilder();
			#region Per table code
			if (false) ;
			else if (typeof(T) == typeof(Gravitybox.gFileSystem.EFDAL.Entity.ConfigSetting))
			{
				sb.AppendLine("set rowcount " + optimizer.ChunkSize + ";");
				foreach (var item in mapping.Where(x => x.SqlList.Any()).ToList())
				{
					sb.AppendLine("UPDATE [X] SET");
					sb.AppendLine(string.Join(", ", item.SqlList));
					sb.AppendLine("FROM [" + item.Schema + "].[" + item.TableName + "] AS [X] INNER JOIN (");
					sb.AppendLine(((IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.ConfigSetting>)query).Select(x => new { x.ID }).ToString());
					sb.AppendLine(") AS [Extent2]");
					sb.AppendLine("on [X].[ID] = [Extent2].[ID]");
					sb.AppendLine("select @@ROWCOUNT");
				}
			}
			else if (typeof(T) == typeof(Gravitybox.gFileSystem.EFDAL.Entity.FileStash))
			{
				sb.AppendLine("set rowcount " + optimizer.ChunkSize + ";");
				foreach (var item in mapping.Where(x => x.SqlList.Any()).ToList())
				{
					sb.AppendLine("UPDATE [X] SET");
					sb.AppendLine(string.Join(", ", item.SqlList));
					sb.AppendLine("FROM [" + item.Schema + "].[" + item.TableName + "] AS [X] INNER JOIN (");
					sb.AppendLine(((IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.FileStash>)query).Select(x => new { x.FileStashID }).ToString());
					sb.AppendLine(") AS [Extent2]");
					sb.AppendLine("on [X].[FileStashID] = [Extent2].[FileStashID]");
					sb.AppendLine("select @@ROWCOUNT");
				}
			}
			else if (typeof(T) == typeof(Gravitybox.gFileSystem.EFDAL.Entity.Tenant))
			{
				sb.AppendLine("set rowcount " + optimizer.ChunkSize + ";");
				foreach (var item in mapping.Where(x => x.SqlList.Any()).ToList())
				{
					sb.AppendLine("UPDATE [X] SET");
					sb.AppendLine(string.Join(", ", item.SqlList));
					sb.AppendLine("FROM [" + item.Schema + "].[" + item.TableName + "] AS [X] INNER JOIN (");
					sb.AppendLine(((IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.Tenant>)query).Select(x => new { x.TenantID }).ToString());
					sb.AppendLine(") AS [Extent2]");
					sb.AppendLine("on [X].[TenantID] = [Extent2].[TenantID]");
					sb.AppendLine("select @@ROWCOUNT");
				}
			}
			else throw new Exception("Entity type not found");
			#endregion

			if (string.IsNullOrEmpty(connectionString))
				connectionString = gFileSystemEntities.GetConnectionString();

			var newParams = new List<System.Data.SqlClient.SqlParameter>();
			if (existingParams != null)
			{
				foreach (var ep in existingParams)
				{
					newParams.Add(new System.Data.SqlClient.SqlParameter { ParameterName = ep.Name, Value = (ep.Value == null ? System.DBNull.Value : ep.Value) });
				}
			}
			newParams.AddRange(parameters);
			QueryPreCache.AddUpdate(instanceKey, sb.ToString(), newParams, optimizer);
		}

		private class UpdateSqlMapItem
		{
			public string TableName { get; set; }
			public List<string> FieldList { get; set; } = new List<string>();
			public List<string> SqlList { get; set; } = new List<string>();
			public string Schema { get; set; }
			public IMetadata Metadata { get; set; }
		}

		private static T CompileValue<T>(this Expression exp)
		{
			var accessorExpression = Expression.Lambda<Func<T>>(exp);
			var accessor = accessorExpression.Compile();
			return accessor();

		}

		/// <summary />
		public static void Update<T>(this System.Data.Entity.DbSet<T> entitySet, Expression<Func<T, bool>> where, Expression<Func<T, T>> obj)
			where T : class, Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			entitySet.Where(where).Update(obj, optimizer: null, connectionString: null);
		}

		/// <summary />
		public static void Update<T>(this System.Data.Entity.DbSet<T> entitySet, Expression<Func<T, bool>> where, Expression<Func<T, T>> obj, QueryOptimizer optimizer)
			where T : class, Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			entitySet.Where(where).Update(obj, optimizer: optimizer, connectionString: null);
		}

		/// <summary />
		public static void Update<T>(this System.Data.Entity.DbSet<T> entitySet, Expression<Func<T, bool>> where, Expression<Func<T, T>> obj, string connectionString)
			where T : class, Gravitybox.gFileSystem.EFDAL.IBusinessObject, new()
		{
			entitySet.Where(where).Update(obj, optimizer: null, connectionString: connectionString);
		}

		#endregion
	}

	#region SequentialIdGenerator

	/// <summary>
	/// Generates Sequential Guid values that can be used for Sql Server UniqueIdentifiers to improve performance.
	/// </summary>
	internal class SequentialIdGenerator
	{
		private readonly object _lock;
		private Guid _lastGuid;
		// 3 - the least significant byte in Guid ByteArray [for SQL Server ORDER BY clause]
		// 10 - the most significant byte in Guid ByteArray [for SQL Server ORDERY BY clause]
		private static readonly int[] SqlOrderMap = new int[] { 3, 2, 1, 0, 5, 4, 7, 6, 9, 8, 15, 14, 13, 12, 11, 10 };

		/// <summary>
		/// Creates a new SequentialId class to generate sequential GUID values.
		/// </summary>
		public SequentialIdGenerator() : this(Guid.NewGuid()) { }

		/// <summary>
		/// Creates a new SequentialId class to generate sequential GUID values.
		/// </summary>
		/// <param name="seed">Starting seed value.</param>
		/// <remarks>You can save the last generated value <see cref="LastValue"/> and then 
		/// use this as the new seed value to pick up where you left off.</remarks>
		public SequentialIdGenerator(Guid seed)
		{
			_lock = new object();
			_lastGuid = seed;
		}

		/// <summary>
		/// Last generated guid value.  If no values have been generated, this will be the seed value.
		/// </summary>
		public Guid LastValue
		{
			get {
				lock (_lock)
				{
					return _lastGuid;
				}
			}
			set
			{
				lock (_lock)
				{
					_lastGuid = value;
				}
			}
		}

		/// <summary>
		/// Generate a new sequential id.
		/// </summary>
		/// <returns>New sequential id value.</returns>
		public Guid NewId()
		{
			Guid newId;
			lock (_lock)
			{
				var guidBytes = _lastGuid.ToByteArray();
				ReorderToSqlOrder(ref guidBytes);
				newId = new Guid(guidBytes);
				_lastGuid = newId;
			}

			return newId;
		}

		private static void ReorderToSqlOrder(ref byte[] bytes)
		{
			foreach (var bytesIndex in SqlOrderMap)
			{
				bytes[bytesIndex]++;
				if (bytes[bytesIndex] != 0)
				{
					break;
				}
			}
		}

		/// <summary>
		/// IComparer.Compare compatible method to order Guid values the same way as MS Sql Server.
		/// </summary>
		/// <param name="x">The first guid to compare</param>
		/// <param name="y">The second guid to compare</param>
		/// <returns><see cref="System.Collections.IComparer.Compare"/></returns>
		public static int SqlCompare(Guid x, Guid y)
		{
			var result = 0;
			var index = SqlOrderMap.Length - 1;
			var xBytes = x.ToByteArray();
			var yBytes = y.ToByteArray();

			while (result == 0 && index >= 0)
			{
				result = xBytes[SqlOrderMap[index]].CompareTo(yBytes[SqlOrderMap[index]]);
				index--;
			}
			return result;
		}
	}

	#endregion

	#endregion

}
