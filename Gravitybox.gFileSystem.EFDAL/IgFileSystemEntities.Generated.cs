//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 0168
#pragma warning disable 0108
using System;
using System.Linq;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Collections.Generic;
using Gravitybox.gFileSystem.EFDAL.Entity;

namespace Gravitybox.gFileSystem.EFDAL
{
	#region Entity Context

	/// <summary />
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial interface IgFileSystemEntities : System.IDisposable
	{
		/// <summary />
		event EventHandler<Gravitybox.gFileSystem.EFDAL.EventArguments.EntityListEventArgs> BeforeSaveAddedEntity;
		/// <summary />
		event EventHandler<Gravitybox.gFileSystem.EFDAL.EventArguments.EntityListEventArgs> BeforeSaveModifiedEntity;
		/// <summary />
		int SaveChanges();

		/// <summary />
		IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.ConfigSetting> ConfigSetting { get ; }

		/// <summary />
		IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.FileStash> FileStash { get ; }

		/// <summary />
		IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.Tenant> Tenant { get ; }

		/// <summary />
		IQueryable<Gravitybox.gFileSystem.EFDAL.Entity.ThreadLock> ThreadLock { get ; }

		/// <summary />
		Gravitybox.gFileSystem.EFDAL.IBusinessObject AddItem(Gravitybox.gFileSystem.EFDAL.IBusinessObject entity);

		/// <summary />
		void DeleteItem(Gravitybox.gFileSystem.EFDAL.IBusinessObject entity);

		/// <summary />
		void ReloadItem(BaseEntity entity);

		/// <summary />
		void DetachItem(BaseEntity entity);

		/// <summary />
		ContextStartup ContextStartup { get; }

		/// <summary />
		System.Guid InstanceKey { get; }
	}

	#endregion

	/// <summary />
	public partial interface IMetadata
	{
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		string GetTableName();

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		List<string> GetFields();

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		System.Type InheritsFrom();

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		string Schema();

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		string GetDatabaseFieldName(string field);
	}

}

#pragma warning restore 0168
#pragma warning restore 0108
